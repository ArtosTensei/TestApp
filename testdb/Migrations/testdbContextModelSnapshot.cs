// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using testdb.Models;

namespace testdb.Migrations
{
    [DbContext(typeof(testdbContext))]
    partial class testdbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasCharSet("utf8mb4")
                .UseCollation("utf8mb4_0900_ai_ci")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.12");

            modelBuilder.Entity("testdb.Models.Order", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idOrder");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<int>("IdUser")
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.HasKey("IdOrder")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdOrder" }, "idOrder_UNIQUE")
                        .IsUnique();

                    b.HasIndex(new[] { "IdUser" }, "idUser_idx");

                    b.ToTable("order");
                });

            modelBuilder.Entity("testdb.Models.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idRole");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Name" }, "Name_UNIQUE")
                        .IsUnique()
                        .HasDatabaseName("Name_UNIQUE1");

                    b.HasIndex(new[] { "IdRole" }, "id_UNIQUE")
                        .IsUnique();

                    b.ToTable("role");
                });

            modelBuilder.Entity("testdb.Models.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("idUser");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("IdUser")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "UserRole" }, "URole_idx");

                    b.HasIndex(new[] { "IdUser" }, "idUser_UNIQUE")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("testdb.Models.Order", b =>
                {
                    b.HasOne("testdb.Models.User", "IdUserNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdUser")
                        .HasConstraintName("idUser")
                        .IsRequired();

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("testdb.Models.User", b =>
                {
                    b.HasOne("testdb.Models.Role", "UserRoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("UserRole")
                        .HasConstraintName("Role")
                        .IsRequired();

                    b.Navigation("UserRoleNavigation");
                });

            modelBuilder.Entity("testdb.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("testdb.Models.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
